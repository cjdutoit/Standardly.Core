{
  "name": "BROKERS: DateTime Broker",
  "description": "Generates a DateTime Broker",
  "templateType": "API",
  "projectsRequired": "Api",
  "sortOrder": 1,
  "modelSingularName": "DateTime",
  "modelPluralName": "DateTimes",
  "tasks": [
    {
      "name": "BROKERS: DateTime - Get Current DateTime Offset",
      "branchName": "brokers-datetime-getcurrentdatetimeoffset",
      "actions": [
        {
          "name": "001 - BROKERS: DateTime - Get Current DateTime Offset",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\Api\\Brokers\\DateTimes\\001_IDateTimeBroker.cs.txt",
              "target": "$projectFolder$\\$brokers$\\DateTimes\\IDateTimeBroker.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\Api\\Brokers\\DateTimes\\001_DateTimeBroker.cs.txt",
              "target": "$projectFolder$\\$brokers$\\DateTimes\\DateTimeBroker.cs",
              "replace": true
            }
          ],
          "appends": [
            {
              "target": "$projectFolder$\\Startup.cs",
              "doesNotContainContent": "private static void AddBrokers(IServiceCollection services)",
              "regexToMatchForAppend": "(?<=public class Startup\\r\\n    \\{\\r\\n)([\\S\\s]*?)(?=\\r\\n    \\}\\r\\n)",
              "contentToAppend": "\r\n        private static void AddBrokers(IServiceCollection services)\r\n        {\r\n        }",
              "appendToBeginning": false,
              "appendEvenIfContentAlreadyExist": false
            },
            {
              "target": "$projectFolder$\\Startup.cs",
              "doesNotContainContent": "private static void AddFoundations(IServiceCollection services)",
              "regexToMatchForAppend": "(?<=public class Startup\\r\\n    \\{\\r\\n)([\\S\\s]*?)(?=\\r\\n    \\}\\r\\n)",
              "contentToAppend": "\r\n        private static void AddFoundations(IServiceCollection services)\r\n        {\r\n        }",
              "appendToBeginning": false,
              "appendEvenIfContentAlreadyExist": false
            },
            {
              "target": "$projectFolder$\\Startup.cs",
              "doesNotContainContent": "private static void AddProcessings(IServiceCollection services)",
              "regexToMatchForAppend": "(?<=public class Startup\\r\\n    \\{\\r\\n)([\\S\\s]*?)(?=\\r\\n    \\}\\r\\n)",
              "contentToAppend": "\r\n        private static void AddProcessings(IServiceCollection services)\r\n        {\r\n        }",
              "appendToBeginning": false,
              "appendEvenIfContentAlreadyExist": false
            },
            {
              "target": "$projectFolder$\\Startup.cs",
              "doesNotContainContent": "private static void AddOrchestrations(IServiceCollection services)",
              "regexToMatchForAppend": "(?<=public class Startup\\r\\n    \\{\\r\\n)([\\S\\s]*?)(?=\\r\\n    \\}\\r\\n)",
              "contentToAppend": "\r\n        private static void AddOrchestrations(IServiceCollection services)\r\n        {\r\n        }",
              "appendToBeginning": false,
              "appendEvenIfContentAlreadyExist": false
            },
            {
              "target": "$projectFolder$\\Startup.cs",
              "doesNotContainContent": "",
              "regexToMatchForAppend": "(?<=public void ConfigureServices\\(IServiceCollection services\\)\\r\\n        \\{\\r\\n)([\\S\\s]*?)(?=\\n        \\}\\r\\n)",
              "contentToAppend": "            AddOrchestrations(services);\r\n",
              "appendToBeginning": true,
              "appendEvenIfContentAlreadyExist": false
            },
            {
              "target": "$projectFolder$\\Startup.cs",
              "doesNotContainContent": "",
              "regexToMatchForAppend": "(?<=public void ConfigureServices\\(IServiceCollection services\\)\\r\\n        \\{\\r\\n)([\\S\\s]*?)(?=\\n        \\}\\r\\n)",
              "contentToAppend": "            AddProcessings(services);",
              "appendToBeginning": true,
              "appendEvenIfContentAlreadyExist": false
            },
            {
              "target": "$projectFolder$\\Startup.cs",
              "doesNotContainContent": "",
              "regexToMatchForAppend": "(?<=public void ConfigureServices\\(IServiceCollection services\\)\\r\\n        \\{\\r\\n)([\\S\\s]*?)(?=\\n        \\}\\r\\n)",
              "contentToAppend": "            AddFoundations(services);",
              "appendToBeginning": true,
              "appendEvenIfContentAlreadyExist": false
            },
            {
              "target": "$projectFolder$\\Startup.cs",
              "doesNotContainContent": "",
              "regexToMatchForAppend": "(?<=public void ConfigureServices\\(IServiceCollection services\\)\\r\\n        \\{\\r\\n)([\\S\\s]*?)(?=\\n        \\}\\r\\n)",
              "contentToAppend": "            AddBrokers(services);",
              "appendToBeginning": true,
              "appendEvenIfContentAlreadyExist": false
            },
            {
              "target": "$projectFolder$\\Startup.cs",
              "doesNotContainContent": "",
              "regexToMatchForAppend": "(?<=private static void AddBrokers\\(IServiceCollection services\\)\\r\\n        \\{\\r\\n)([\\S\\s]*?)(?=        \\}\\r\\n)",
              "contentToAppend": "            services.AddTransient<IDateTimeBroker, DateTimeBroker>();",
              "appendToBeginning": true,
              "appendEvenIfContentAlreadyExist": false
            }
          ]
        }
      ]
    }
  ],
  "cleanupTasks": [
    "----------------------------------------------------",
    "BROKERS: DateTimeBroker",
    "----------------------------------------------------",
    "* Register the DateTimeBroker in Startup.cs => AddBrokers(IServiceCollection services) then do a commit and push.",
    "* Resolve / remove any TODO items in the task list if any",
    "* Link the pull request(s) to related issues by adding e.g. #CLOSES 123 to the description",
    "* Review Draft Pull Requests (and add more commits by pushing to any of the branches if needed):",
    "  - BROKERS: DateTime - Get Current DateTime Offset  ->  users/$username$/brokers-datetime-getcurrentdatetimeoffset"
  ]
}